{"version":3,"sources":["components/JobMask/JobMask.module.css","components/Filter/Filter.module.css","views/UserDetailPage/UserDetailPage.module.css","views/CompanyDetailPage/CompanyDetailPage.module.css","views/JobDetailPage/JobDetailPage.module.css","components/Navigation/Navigation.module.css","components/JobList/JobList.module.css","views/JobPage/JobPage.module.css","views/CreateCompanyPage/CreateCompanyPage.module.css","views/LoginPage/LoginPage.module.css","views/CreateUserPage/CreateUserPage.module.css","views/SignupPage/SignupPage.module.css","actions/loginAction.js","actions/companyAction.js","actions/jobsAction.js","actions/filterAction.js","components/Filter/Filter.js","components/Navigation/Navigation.js","components/JobList/JobList.js","views/JobPage/JobPage.js","views/SignupPage/SignupPage.js","views/CreateCompanyPage/CreateCompanyPage.js","components/JobMask/JobMask.js","views/CompanyDetailPage/CompanyDetailPage.js","actions/userAction.js","views/LoginPage/LoginPage.js","views/JobDetailPage/JobDetailPage.js","views/CreateUserPage/CreateUserPage.js","views/UserDetailPage/UserDetailPage.js","App.js","reducers/jobReducer.js","reducers/companyReducer.js","reducers/loginReducer.js","reducers/userReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","mask","form","mask-down","title","content","cancelButton","confirmButton","filterContainer","filterContent","clearPart","searchPart","sortPart","container","tableContainer","sideContainer","recommendContainer","table","createJobButton","header","applicantsContainer","nav","companyImg","jobContent","radioContainer","loginAction","data","type","payload","fetchCompanyData","company","formBody","FormData","append","email","password","name","address","description","imgUrl","fetch","body","method","then","res","json","catch","err","fetchLoginData","requestBody","query","variables","headers","Content-Type","JSON","stringify","initialCompanyAction","changeCompanyJobs","createOneJob","args","inputData","requirement","companyId","_id","updateOneJob","applyOneJob","userId","jobId","requestRecommendJobs","desire","console","log","deleteOneJob","initialAllJobAction","createJobAction","viewJobDetailAction","addJobToUserAction","setRecommendJobs","fetchJobsData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","wrap","_context","prev","next","sent","abrupt","getAllJobs","t0","stop","_x","_x2","apply","this","arguments","sortJobsHandler","sortedText","searchJobsHandler","text","connect","sortJobs","sortedData","searchData","_ref2","_callee2","searchedData","_context2","searchJobs","_x3","_x4","props","filterTop","top","selectEl","React","createRef","textEl","react_default","createElement","className","classes","style","defaultValue","onChange","e","target","value","ref","onClick","current","withRouter","loginData","_useState","useState","_useState2","slicedToArray","showFilter","toggleFilter","Fragment","history","push","searchBar","location","pathname","isLogin","react_router_dom","to","identification","components_Filter_Filter","viewJobDetail","_ref3","_callee3","_context3","_x5","_x6","viewJobHandler","jobs","length","map","job","index","key","bind","src","JobPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","components_JobList_JobList","PureComponent","allJobs","SignupPage","companySignupHandler","_this","userSignupHandler","CreateCompanyPage","createCompanyHandler","preventDefault","emailEl","passwordEl","nameEl","addressEl","typeEl","descriptionEl","imgUrlEl","files","createCompanyData","rePasswordEl","htmlFor","id","createCompany","username","JobMask","titleEl","desEl","reqEl","update","cancel","item","objectSpread","split","confirm","CompanyDetailPage","state","showMask","openMaskHandler","setState","cancelMaskHandler","createJobHandler","createJobData","components_JobMask_JobMask","createJob","createUserData","user","skills","userLoginData","initialUserAction","LoginPage","loginHandler","userRadioEl","checked","companyLogin","alert","userLogin","companyRadioEl","defaultChecked","JobDetailPage","showMaskHandler","updateJobHandler","updateJobDetail","applyHandler","applyJob","currentJob","deleteJobHandler","deleteJob","_this$props$loginData","login_id","currentUser","every","some","disabled","date","applicants","_ref4","_callee4","newJob","_context4","updateJob","_x7","_x8","_ref5","_callee5","_context5","_x9","_x10","_ref7","_callee7","temp","_context7","forEach","_x13","_x14","CreateUserPage","firstContent","createUserHandler","repassword","usernameEl","skillsEl","desireEl","createUser","changeContentHandler","userDetailPage","updateInfoHandler","refreshRecommendationHandler","getRecommendJobs","updateButton","recommendJobs","_ref6","_callee6","_context6","_x11","_x12","App","components_Navigation_Navigation","react_router","exact","path","component","UserDetailPage","from","Component","initialState","jobReducer","undefined","action","concat","toConsumableArray","companyReducer","loginReducer","userReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f65c4af7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mask\":\"JobMask_mask__On5e1\",\"form\":\"JobMask_form__2Ge7l\",\"mask-down\":\"JobMask_mask-down__WOkcN\",\"title\":\"JobMask_title__2L-73\",\"content\":\"JobMask_content__3urL3\",\"cancelButton\":\"JobMask_cancelButton__Q2RjI\",\"confirmButton\":\"JobMask_confirmButton__2ftvx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__vHOkV\",\"filterContent\":\"Filter_filterContent__18sMd\",\"clearPart\":\"Filter_clearPart__SLvj0\",\"searchPart\":\"Filter_searchPart__2bL72\",\"sortPart\":\"Filter_sortPart__oL9KU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserDetailPage_container__3ueSh\",\"tableContainer\":\"UserDetailPage_tableContainer__37aHV\",\"sideContainer\":\"UserDetailPage_sideContainer__3afCo\",\"recommendContainer\":\"UserDetailPage_recommendContainer__1B8XA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CompanyDetailPage_container__HbRgo\",\"table\":\"CompanyDetailPage_table__ICIYI\",\"createJobButton\":\"CompanyDetailPage_createJobButton__28O1I\",\"sideContainer\":\"CompanyDetailPage_sideContainer__3Uvmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobDetailPage_container__3kxMD\",\"header\":\"JobDetailPage_header__3Zwvx\",\"content\":\"JobDetailPage_content__2mY3Y\",\"applicantsContainer\":\"JobDetailPage_applicantsContainer__3sv9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__2ZKlO\",\"title\":\"Navigation_title__1712P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobList_container__QsGFK\",\"companyImg\":\"JobList_companyImg__3j5y9\",\"jobContent\":\"JobList_jobContent__1BO7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobPage_container__2wjaE\",\"content\":\"JobPage_content__lcp8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CreateCompanyPage_container__WpQFz\",\"form\":\"CreateCompanyPage_form__34y5p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoginPage_container__Ztr2M\",\"radioContainer\":\"LoginPage_radioContainer__2sZSf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CreateUserPage_container__2cEAD\",\"form\":\"CreateUserPage_form__JyZtK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SignupPage_container__T-Dj3\"};","\nexport const loginAction = (data) => {\n    return {\n        type: 'INITIAL_LOGIN_DATA',\n        payload: data\n    }   \n}\n\nexport const logoutAction = () => {\n    return {\n        type: 'DO_LOGOUT_DATA'\n    }\n}\n","import {loginAction} from './loginAction';\n\nconst fetchCompanyData = (company) => {\n    /*const requestBody = {\n        query: `\n            mutation createOne($company: CreateCompanyInput){\n                createCompany(companyInput: $company) {\n                    _id,\n                    email,\n                    name,\n                    address,\n                    type,\n                    description,\n                    imgUrl,\n                    jobs {\n                        _id\n                    }\n                }\n            }\n        `,\n        variables: {\n            company: {\n                email: company.email,\n                password: company.password,\n                name: company.name,\n                address: company.address,\n                type: company.type,\n                description: company.description,\n                imgUrl: company.imgUrl\n            }\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);*/\n\n    const formBody = new FormData();\n    formBody.append(\"email\", company.email);\n    formBody.append('password', company.password);\n    formBody.append('name', company.name);\n    formBody.append('address', company.address);\n    formBody.append('type', company.type);\n    formBody.append('description', company.description);\n    formBody.append('img', company.imgUrl);\n    \n    return fetch('/graphql', {\n        body: formBody,\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\nconst fetchLoginData = (email, password) => {\n    const requestBody = {\n        query: `\n            query login($email: String!, $password: String!){\n                companyLogin(email: $email, password: $password) {\n                    _id,\n                    email,\n                    name,\n                    address,\n                    type,\n                    description,\n                    imgUrl,\n                    identification,\n                    jobs {\n                        _id,\n                        title,\n                        description,\n                        requirement,\n                        date,\n                        type,\n                        companyId {\n                            _id,\n                            name,\n                            address,\n                            imgUrl\n                        }\n                        applicants {\n                            _id,\n                            username,\n                            email\n                        }\n                    }\n                }\n            }\n        `,\n        variables: {\n            email: email,\n            password: password\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\n\nconst initialCompanyAction = (data) => {\n    return {\n        type: 'INITIAL_COMPANY_DATA',\n        payload: data\n    };\n}\n\nexport const changeCompanyJobs = (data) => ({\n    type: 'CHANGE_COMPANY_JOBS_DATA',\n    payload: data\n})\n\n\nexport const createCompanyData = (company) => async (dispatch, getState) => {\n    try {\n        const data = await fetchCompanyData(company);\n        dispatch(initialCompanyAction(data.data.createCompany));\n        dispatch(loginAction({\n            identification: data.data.createCompany.identification,\n            username: data.data.createCompany.name,\n            _id: data.data.createCompany._id\n        }));\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}\n\nexport const companyLogin = (email, password) => async (dispatch, getState) => {\n    try {\n        const company = await fetchLoginData(email, password);\n        dispatch(initialCompanyAction(company.data.companyLogin));\n        dispatch(loginAction({\n            identification: company.data.companyLogin.identification,\n            username: company.data.companyLogin.name,\n            _id: company.data.companyLogin._id\n        }));\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}","import {changeCompanyJobs} from './companyAction';\n\n\nconst fetchData = () => {\n    const requestBody = {\n        query: `\n            query {\n                getAllJobs {\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }\n        `\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\nconst createOneJob = (args) => {\n    const requestBody = {\n        query: `\n            mutation createOne($inputData: CreateJobInput) {\n                createJob(jobInput: $inputData){\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }\n        `,\n        variables: {\n            inputData: {\n                title: args.title,\n                description: args.description,\n                requirement: args.requirement,\n                type: args.type,\n                companyId: args._id\n            }\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\n\nconst updateOneJob = (args) => {\n    const requestBody = {\n        query: `\n            mutation updateOne($inputData: UpdateJobInput) {\n                updateJob(updateInput: $inputData){\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id\n                    }\n                }\n            }\n        `,\n        variables: {\n            inputData: {\n                _id: args._id,\n                title: args.title,\n                description: args.description,\n                requirement: args.requirement,\n                type: args.type\n            }\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\n\n\nconst applyOneJob = (userId, jobId) => {\n\n    const requestBody = {\n        query: `\n            mutation ApplyJob($userId: String!, $jobId: String!) {\n                applyJob(userId: $userId, jobId: $jobId) {\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }\n        `,\n        variables: {\n            userId: userId,\n            jobId: jobId\n        }\n    };\n\n    return fetch('graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => res.json()).catch(err=>err);\n}\n\n\n\nconst requestRecommendJobs = (desire) => {\n    const requestBody = {\n        query: `\n            query GetRecommendJobs($desire: [String!]) {\n                getRecommendJobs (desire: $desire) {\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }       \n        `,\n        variables: {\n            desire: desire\n        }\n    };\n\n    return fetch('/graphql' , {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(requestBody)\n    }).then(res => res.json()).catch(err => console.log(err));\n}\n\n\nconst deleteOneJob = (jobId) => {\n    const requestBody = {\n        query: `\n            mutation delete($jobId: String!) {\n                deleteJob(jobId: $jobId) {\n                    _id\n                }\n            }        \n        `,\n        variables: {\n            jobId: jobId\n        }\n    };\n\n    return fetch('/graphql' , {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(requestBody)\n    }).then(res => res.json()).catch(err => console.log(err));\n}\n\n\n\n\n\nexport const initialAllJobAction = (data) => ({\n    type: 'INITIAL_ALLJOB_DATA',\n    payload: data\n})\n\nconst createJobAction = (data) => ({\n    type: 'CREATE_JOB_DATA',\n    payload: data\n})\n\nconst viewJobDetailAction = (data) => ({\n    type: 'VIEW_JOB_DETAIL_DATA',\n    payload: data\n})\n\nconst addJobToUserAction = (data) => ({\n    type: 'ADD_JOB_TO_USER_DATA',\n    payload: data\n})\n\nconst setRecommendJobs = (data) => ({\n    type: 'SET_RECOMMEND_JOBS_DATA',\n    payload: data\n})\n\n\n\nexport const fetchJobsData = () => async (dispatch, getState) => {\n    try {  \n        const data = await fetchData();\n        return dispatch(initialAllJobAction(data.data.getAllJobs));\n    } catch (err) {\n        console.log(err);\n    }\n     \n}\n\nexport const createJobData = (args) => async (dispatch, getState) => {\n    try { \n        const data = await createOneJob(args);\n        dispatch(createJobAction(data.data.createJob));\n        return 1;\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const viewJobDetail = (args) => async (dispatch, getState) => {\n    try {\n        dispatch(viewJobDetailAction(args));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const updateJobDetail = (args) => async (dispatch, getState) => {\n    try {\n        const data = await updateOneJob(args);\n\n        let allJobs = getState().allJobs.data;\n\n        let newJob = {\n            ...data.data.updateJob,\n            title: args.title,\n            description: args.description,\n            requirement: args.requirement,\n            type: args.type\n        };\n\n        allJobs = allJobs.map(item => {\n            if (item._id === newJob._id) {\n                return newJob;\n            }\n            return item;\n        })\n\n        dispatch(initialAllJobAction(allJobs));\n        dispatch(viewJobDetailAction(args));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\n\nexport const applyJob = (args) => async (dispatch, getState) => {\n    try {\n        const data = await applyOneJob(args.userId, args.jobId);\n\n        // add job to currentUser\n        dispatch(addJobToUserAction(data.data.applyJob));\n\n        // add user to this job applicants\n        let allJobs = getState().allJobs.data;\n        if (allJobs && allJobs.length > 0) {\n            allJobs = allJobs.map(item => {\n                if (item._id === data.data.applyJob._id) {\n                    return data.data.applyJob;\n                }\n                return item;\n            });\n\n            dispatch(initialAllJobAction(allJobs));\n        }\n\n        // add user to this current job applicants\n        let currentJob = getState().allJobs.currentJob;\n        if (currentJob) {\n            dispatch(viewJobDetailAction(data.data.applyJob));\n        }\n        \n\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}\n\n\nexport const getRecommendJobs = (desire) => async (dispatch, getState) => {\n    try {\n        const data = await requestRecommendJobs(desire);\n\n        dispatch(setRecommendJobs(data.data.getRecommendJobs));\n\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}\n\nexport const deleteJob = (jobId) => async (dispatch, getState) => {\n    try {\n        const data = await deleteOneJob(jobId);\n        // delete currentJob,\n        dispatch(viewJobDetailAction(null));\n\n        let jobs = getState().company.data.jobs;\n        let temp = [];\n        if (jobs && jobs.length > 0) {\n            \n            jobs.forEach(item => {\n                if (item._id !== jobId) {\n                    temp.push(item);\n                }\n            });\n\n            dispatch(changeCompanyJobs(temp));\n        }\n\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}","import {initialAllJobAction, fetchJobsData} from './jobsAction';\n\n\nconst sortJobsHandler = (args) => {\n    const requestBody = {\n        query :  `\n            query Sort($sortedText: String!) {\n                sortJobs(sortedText: $sortedText) {\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }       \n        `,\n        variables: {\n            sortedText: args\n        }\n    }\n\n\n    return fetch('/graphql', {\n        body: JSON.stringify(requestBody),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST'\n    }).then(res=> res.json()).catch(err=>err);\n}\n\n\n\nconst searchJobsHandler = (args) => {\n    const requestBody = {\n        query :  `\n            query Search($text: String!) {\n                searchJobs(text: $text) {\n                    _id,\n                    title,\n                    description,\n                    requirement,\n                    date,\n                    type,\n                    companyId {\n                        _id,\n                        name,\n                        address,\n                        imgUrl\n                    }\n                    applicants {\n                        _id,\n                        username,\n                        email\n                    }\n                }\n            }       \n        `,\n        variables: {\n            text: args\n        }\n    }\n\n\n    return fetch('/graphql', {\n        body: JSON.stringify(requestBody),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST'\n    }).then(res=> res.json()).catch(err=>err);\n}\n\n\nexport const sortJobs = (args) => async (dispatch, getState) => {\n\n    try {\n        let sortedData = await sortJobsHandler(args);\n\n        dispatch(initialAllJobAction(sortedData.data.sortJobs));\n\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n} \n\n\nexport const searchData = (args) => async (dispatch, getState) => {\n\n    try {\n        let searchedData = await searchJobsHandler(args);\n    \n        dispatch(initialAllJobAction(searchedData.data.searchJobs));\n\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n} ","import React from 'react';\nimport classes from './Filter.module.css';\nimport {sortJobs, searchData} from '../../actions/filterAction';\nimport {fetchJobsData} from '../../actions/jobsAction';\nimport {connect} from 'react-redux';\n\nconst Filter = (props) => {\n\n    const filterTop = {\n        top: props.top\n    }\n\n    const selectSortHandler = (e) => {\n        let text = e.target.value;\n        \n        if (text === 'default') {\n            props.fetchJobsData();\n        } else {\n            props.sortJobs(text);\n        }\n        \n    }\n\n    const clearFilterHandler = (e) => {\n        props.fetchJobsData();\n        selectEl.current.value = 'default';\n        textEl.current.value = '';\n    }\n\n    const searchDataHandler = () => {\n        let text = textEl.current.value;\n        props.searchData(text);\n    }\n\n    const selectEl = React.createRef();\n    const textEl = React.createRef();\n\n    return (\n        <div className={classes.filterContainer} style={filterTop} >\n                <div className={classes.filterContent}>\n                    <div className={classes.sortPart}>\n                        <label>Sorted By </label>\n                        <select defaultValue='-default-' onChange={selectSortHandler} ref={selectEl}>\n                            <option value='default'>-default-</option>\n                            <option value='job-title'>Title(A-Z)</option>\n                        </select>\n                    </div>\n                    <div className={classes.searchPart}>\n                        <input ref={textEl} type='text' />\n                        <button onClick={searchDataHandler}>Search</button>\n                    </div>\n                    <div className={classes.clearPart}>\n                        <button onClick={clearFilterHandler}>Clear Search</button>\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default connect(null, {sortJobs, fetchJobsData, searchData})(Filter);","import React, {useState, useLayoutEffect} from 'react';\nimport classes from './Navigation.module.css';\nimport {NavLink, withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {logoutAction} from '../../actions/loginAction';\nimport Filter from '../Filter/Filter';\n\nconst Navigation = (props) => {\n\n    const backHome = () => {\n        props.history.push('/all-jobs');\n    }\n\n    const logoutHandler = () => {\n        props.dispatch(logoutAction());\n        props.history.push('/all-jobs');\n    }\n\n    let [showFilter, toggleFilter] = useState(false);\n\n\n    return (\n        <React.Fragment>\n        <nav className={classes.nav}>\n            <div>\n                <span className={classes.title} onClick={backHome}>\n                    Task-Raider-OFFER\n                </span>\n                <div className={classes.searchBar}>\n                    \n                </div>\n            </div>\n            <ul>{\n                    props.location.pathname === '/all-jobs' &&\n                        <li onClick={()=>toggleFilter(!showFilter)}>\n                            <a>Filter</a>\n                        </li>\n                }\n                {!props.loginData.isLogin && <li>\n                    <NavLink to='/login'>Login</NavLink>\n                </li>}\n                {!props.loginData.isLogin && <li>\n                    <NavLink to='/signup'>Signup</NavLink>\n                </li>}\n                {props.loginData.isLogin && props.loginData.identification === 0 && <li>\n                    <NavLink to='/user-detail'>My Data</NavLink>\n                </li>}\n                {props.loginData.isLogin && props.loginData.identification === 1 && <li>\n                    <NavLink to='/company-detail'>Company Data</NavLink>\n                </li>}\n                {props.loginData.isLogin && <li onClick={logoutHandler}>\n                    <a>Logout</a>\n                </li>}\n            </ul>\n        </nav>\n\n        {showFilter &&  props.location.pathname === '/all-jobs' && <Filter top='calc(50px + 1vw)' />}\n        </React.Fragment>\n    )\n\n}\n\nconst mapStateToProps = ({loginData}) => {\n    return {\n        loginData: loginData\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Navigation));","import React from 'react';\nimport classes from './JobList.module.css';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {viewJobDetail} from '../../actions/jobsAction';\n\nconst JobList = (props) => {\n    \n    const viewJobHandler = (args) => {\n        props.viewJobDetail(args);\n        props.history.push('/job-detail');\n    }\n\n    return (<div className={classes.container}>\n        <ul>\n            {\n                props.jobs.length > 0 &&\n                props.jobs.map((job, index) => {\n                    return (\n                        <li key={index} onClick={viewJobHandler.bind(this, job)}>\n                            <img className={classes.companyImg} src={job.companyId.imgUrl} />\n                            <div className={classes.jobContent}>\n                                <span><b>{job.title}</b></span>\n                                <span>{job.companyId.name}</span>\n                                <span>{job.companyId.address}</span>\n                            </div>\n                        </li>\n                    )\n                })\n\n            }\n        </ul>\n    </div>)\n}\n\nexport default withRouter(connect(null, {viewJobDetail})(JobList));\n","import React, { PureComponent } from 'react';\nimport classes from './JobPage.module.css';\nimport { connect } from 'react-redux';\n\nimport { fetchJobsData } from '../../actions/jobsAction';\nimport JobList from '../../components/JobList/JobList';\n\nclass JobPage extends PureComponent {\n\n    constructor(props) {\n        super(props);\n    }\n\n    \n\n    componentDidMount() {\n        if (!(this.props.jobs && this.props.jobs.length > 0)) {\n            this.props.fetchJobsData();\n        }\n        \n    }\n\n    render() {\n        console.log(this.props.jobs);\n        return (\n            <div className={classes.container}>\n                \n                {this.props.jobs.length > 0 &&\n                    <div className={classes.content}>\n                        <JobList jobs={this.props.jobs} />\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ allJobs }) => {\n    return {\n        jobs: allJobs.data\n    }\n}\n\n\nexport default connect(mapStateToProps, {fetchJobsData})(JobPage);","import React, {PureComponent} from 'react';\nimport classes from './SignupPage.module.css';\nimport {withRouter} from 'react-router-dom';\n\nclass SignupPage extends PureComponent {\n\n\n    companySignupHandler = () => {\n        this.props.history.push('/create-company');\n    }\n\n    userSignupHandler = () => {\n        this.props.history.push('/create-user');\n    }\n\n    render() {\n        return (\n            <div className={classes.container}>\n                        <button onClick={this.companySignupHandler}>Create A Company</button>\n                        <button onClick={this.userSignupHandler}>Create a User</button>\n                    \n            </div>\n        )\n    }\n}\n\n\nexport default withRouter(SignupPage);\n\n","import React, {PureComponent} from 'react';\nimport classes from './CreateCompanyPage.module.css';\nimport { connect } from 'react-redux';\nimport { createCompanyData } from '../../actions/companyAction';\nimport { withRouter } from 'react-router-dom';\n\nclass CreateCompanyPage extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.emailEl = React.createRef();\n        this.passwordEl = React.createRef();\n        this.rePasswordEl = React.createRef();\n        this.nameEl = React.createRef();\n        this.addressEl = React.createRef();\n        this.typeEl = React.createRef();\n        this.descriptionEl = React.createRef();\n        this.imgUrlEl = React.createRef();\n    }\n\n    createCompanyHandler = (e) => {\n        e.preventDefault();\n\n        const data = {\n            email: this.emailEl.current.value,\n            password: this.passwordEl.current.value,\n            name: this.nameEl.current.value,\n            address: this.addressEl.current.value,\n            type: this.typeEl.current.value,\n            description: this.descriptionEl.current.value,\n            imgUrl: this.imgUrlEl.current.files[0]\n        }\n\n        const status = this.props.createCompanyData(data);\n\n        if (status) {\n            this.props.history.push('/company-detail');\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.container}>\n                <form className={classes.form}>\n                    <label htmlFor='company-email'>Company Email(For Login)</label>\n                    <input id='company-email' type='text' ref={this.emailEl} />\n                    <label htmlFor='company-password'>Password</label>\n                    <input id='company-password' type='password' ref={this.passwordEl}/>\n                    <label htmlFor='company-repassword'>Re-Password</label>\n                    <input id='company-repassword' type='password' ref={this.rePasswordEl} />\n                    <label htmlFor='company-name'>Company Name</label>\n                    <input id='company-name' type='text' ref={this.nameEl} />\n                    <label htmlFor='company-address'>Address</label>\n                    <input id='company-address' type='text' ref={this.addressEl} />\n                    <label htmlFor='company-type'>Type of Business</label>\n                    <select id='company-type' ref={this.typeEl}>\n                        <option>Computer</option>\n                        <option>Finance</option>\n                        <option>Service</option>\n                        <option>Health</option>\n                    </select>\n                    <label htmlFor='company-description' >Description</label>\n                    <textarea ref={this.descriptionEl} />\n                    <label htmlFor='company-imgUrl'>Company Logo</label>\n                    <input type='file' ref={this.imgUrlEl} />\n                    <button onClick={this.createCompanyHandler}>Create</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(connect(null, { createCompanyData })(CreateCompanyPage));\n","import React from 'react';\nimport classes from './JobMask.module.css';\n\nconst JobMask = (props) => {\n\n    let titleEl = React.createRef();\n    let desEl = React.createRef();\n    let reqEl = React.createRef();\n    let typeEl = React.createRef();\n\n    const confirmHander = (e) => {\n        e.preventDefault();\n\n        let item = props.update ? props.current : {};\n        item = {\n            ...item,\n            title: titleEl.current.value,\n            description: desEl.current.value,\n            requirement: reqEl.current.value.split(','),\n            type: typeEl.current.value\n        }\n\n        props.confirm(item);\n    }\n\n    return (\n        <div className={classes.mask}>\n            <form className={classes.form}>\n                <span className={classes.title}>\n                    {props.title}\n                </span>\n                <div className={classes.content}>\n                    <label htmlFor='jobMaskTitle'>Job Title</label>\n                    <input id='jobMaskTitle' ref={titleEl} defaultValue={props.update ? props.current.title : ''} />\n                    <label htmlFor='jobMaskDes'>Job Description</label>\n                    <textarea id='jobMaskDes' ref={desEl} defaultValue={props.update ? props.current.description : ''} />\n                    <label htmlFor='jobMaskReq'>Skill Requirement</label>\n                    <input id='jobMaskReq' ref={reqEl} defaultValue={props.update ? props.current.requirement : ''} />\n                    <label htmlFor='jobMaskType'>Job Type</label>\n                    <select id='jobMaskType' ref={typeEl} defaultValue={props.update && props.current.type} >\n                        <option defaultValue='full time' >Full Time</option>\n                        <option defaultValue='internship'>Internship</option>\n                        <option defaultValue='contract' >Contract</option>\n                    </select>\n                    <button className={classes.cancelButton} onClick={props.cancel}>Cancel</button>\n                    <button className={classes.confirmButton} onClick={confirmHander}>Confirm</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\n\nexport default JobMask;","import React, {PureComponent} from 'react';\nimport classes from './CompanyDetailPage.module.css';\nimport { connect } from 'react-redux';\nimport JobMask from '../../components/JobMask/JobMask';\nimport { createJobData } from '../../actions/jobsAction';\n\nimport JobList from '../../components/JobList/JobList';\n\nclass CompanyDetailPage extends PureComponent {\n\n    state = {\n        showMask: false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    openMaskHandler = (e) => {\n        this.setState({\n            showMask: true\n        });\n    }\n\n    cancelMaskHandler = () => {\n        this.setState({\n            showMask: false\n        });\n    }\n\n    createJobHandler = (data) => {\n        const status = this.props.createJobData({\n            ...data,\n            _id: this.props.company._id\n        });\n\n        this.setState({\n            showMask: false\n        });\n    }\n\n    render() {\n        const item = this.props.company;\n        console.log(item);\n        return (\n            <React.Fragment>\n            <div className={classes.container}>\n                {item && <table className={classes.table}>\n                    <thead>\n                        <tr>\n                            <td>\n                                <img src={item.imgUrl} />\n                            </td>\n                            <td>\n                                <button \n                                    className={classes.createJobButton}\n                                    onClick={this.openMaskHandler}\n                                >\n                                    Create A Job\n                                </button>\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Name: </td>\n                            <td>{item.name}</td>\n                        </tr>\n                        <tr>\n                            <td>Address: </td>\n                            <td>{item.address}</td>\n                        </tr>\n                        <tr>\n                            <td>Type: </td>\n                            <td>{item.type}</td>\n                        </tr>\n                        <tr>\n                            <td>Description: </td>\n                            <td>{item.description}</td>\n                        </tr>\n                        <tr>\n                            <td>Contact: </td>\n                            <td>{item.email}</td>\n                        </tr>\n                    </tbody>\n                </table>}\n\n                {item && \n                    <div className={classes.sideContainer}>\n                        <JobList jobs={item.jobs} />\n                    </div>\n                }\n\n                \n            </div>\n            {this.state.showMask && \n                    <JobMask \n                        title='Create'\n                        cancel={this.cancelMaskHandler} \n                        confirm={this.createJobHandler}\n                    />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = ({company}) => {\n    return {\n        company: company.data\n    }\n}\n\nexport default connect(mapStateToProps, {createJobData})(CompanyDetailPage);","import {loginAction} from './loginAction';\n\nconst createUserData = (args) => {\n    const requestBody = {\n        query: `\n            mutation createOne($user: CreateUserInput){\n                createUser(userInput: $user) {\n                    _id,\n                    username,\n                    email,\n                    skills,\n                    desire,\n                    identification,\n                    jobs {\n                        _id\n                    }\n                }\n            }\n        `,\n        variables: {\n            user: {\n                username: args.username,\n                email: args.email,\n                password: args.password,\n                skills: args.skills,\n                desire: args.desire\n            }\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\n\n\nconst userLoginData = (email, password) => {\n    const requestBody = {\n        query: `\n            query login($email: String!, $password: String!){\n                userLogin(email: $email, password: $password) {\n                    _id,\n                    username,\n                    email,\n                    skills,\n                    desire,\n                    identification,\n                    jobs {\n                        _id,\n                        title,\n                        description,\n                        requirement,\n                        date,\n                        type,\n                        companyId {\n                            _id,\n                            name,\n                            address,\n                            imgUrl\n                        }\n                        applicants {\n                            _id,\n                            username,\n                            email\n                        }\n                    }\n                }\n            }\n        `,\n        variables: {\n            email: email,\n            password: password\n        }\n    };\n\n    return fetch('/graphql', {\n        headers:{\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        method: 'POST'\n    }).then(res => res.json()).catch(err => err);\n}\n\n\n\n\nconst initialUserAction = (data) => ({\n    type: 'INITIAL_USER_DATA',\n    payload: data\n});\n\n\nexport const createUser = (args) => async (dispatch, getState) => {\n    try {\n        let data = await createUserData(args);\n        dispatch(initialUserAction(data.data.createUser));\n        dispatch(loginAction({\n            identification: data.data.createUser.identification,\n            username: data.data.createUser.username,\n            _id: data.data.createUser._id\n        }));\n        return 1;\n    } catch (err) {\n        console.log(err);\n        return 0;\n    }\n    \n} \n\nexport const userLogin = (email, password) => async (dispatch, getState) => {\n    try {\n        const data = await userLoginData(email, password);\n        dispatch(initialUserAction(data.data.userLogin));\n        dispatch(loginAction({\n            identification: data.data.userLogin.identification,\n            username: data.data.userLogin.username,\n            _id: data.data.userLogin._id\n        }));\n        return 1;\n    } catch (err) {\n        return 0;\n    }\n}","import React, { PureComponent } from 'react';\nimport classes from './LoginPage.module.css';\nimport { connect } from 'react-redux';\nimport {companyLogin} from '../../actions/companyAction';\nimport {userLogin} from '../../actions/userAction';\nimport {withRouter} from 'react-router-dom';\n\nclass LoginPage extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.emailEl = React.createRef();\n        this.passwordEl = React.createRef();\n        this.userRadioEl = React.createRef();\n        this.companyRadioEl = React.createRef();\n    }\n\n    loginHandler = async (e) => {\n        e.preventDefault();\n\n        const email = this.emailEl.current.value;\n        const password = this.passwordEl.current.value;\n        const identification = this.userRadioEl.current.checked ? 0 : 1;\n\n        let success = 0;\n        if (identification) {\n            success = await this.props.companyLogin(email, password);\n            if (success) {\n                this.props.history.push('/company-detail');\n            } else {\n                alert('cannot find user');\n            }\n        } else {\n            success = await this.props.userLogin(email, password);\n            if (success) {\n                this.props.history.push('/user-detail');\n            } else {\n                alert('cannot find user');\n            }\n        }\n\n        \n    }\n\n\n    render() {\n        return (\n            <div className={classes.container}>\n                <form>\n                    <label>Email</label>\n                    <input type='text' ref={this.emailEl} />\n                    <label>Password</label>\n                    <input type='password' ref={this.passwordEl} />\n                    <div className={classes.radioContainer}>\n                        <label>User</label>\n                        <label>Company</label>\n                        <span>\n                        <input type='radio' name='type' id='user-radio' defaultChecked={true} ref={this.userRadioEl} />\n                        </span>\n                        <span>\n                        <input type='radio' name='type' id='company-radio' ref={this.companyRadioEl} />\n                        </span>\n                    </div>\n                    <button onClick={this.loginHandler}>Login</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(connect(null, {companyLogin, userLogin})(LoginPage));","import React, { PureComponent } from 'react';\nimport classes from './JobDetailPage.module.css';\nimport {connect} from 'react-redux';\nimport JobMask from '../../components/JobMask/JobMask';\nimport {updateJobDetail} from '../../actions/jobsAction';\nimport {withRouter} from 'react-router-dom';\nimport {applyJob, deleteJob} from '../../actions/jobsAction';\n\nclass JobDetailPage extends PureComponent {\n\n    state = {\n        showMask: false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    cancelMaskHandler = () => {\n        this.setState({\n            showMask: false\n        });\n    }\n\n    showMaskHandler = () => {\n        this.setState({\n            showMask: true\n        });\n    }\n\n    updateJobHandler = (args) => {\n        this.props.updateJobDetail(args);\n        this.setState({\n            showMask: false\n        });\n    }\n\n    applyHandler = async () => {\n        if (!this.props.loginData.isLogin) {\n            alert('Please login first');\n            this.props.history.push('/login');\n        } else {\n            // pass user_id\n            let success = await this.props.applyJob({\n                userId: this.props.loginData._id,\n                jobId: this.props.currentJob._id\n            });\n            if (success) {\n                alert('success');\n            } else {\n                alert('failure');\n            }\n        }\n    }\n\n    deleteJobHandler = async () => {\n        let success = await this.props.deleteJob(this.props.currentJob._id);\n\n        if (success) {\n            this.props.history.push('/company-detail');\n        }\n    }\n\n    render() {\n        let job = this.props.currentJob;\n        let {isLogin, identification, _id} = this.props.loginData;\n        let login_id = _id;\n        let currentUser = this.props.currentUser;\n\n        return (\n            <div className={classes.container}>\n                {job && <div className={classes.content}> \n                    <div className={classes.header}>\n                        <img src={job.companyId.imgUrl}/>\n                        {!(isLogin && identification === 1 && job.companyId._id !== login_id) && <div>\n                        {isLogin && identification === 1 &&\n                            <button onClick={this.showMaskHandler}>Update</button>}\n                        {isLogin && identification === 1 && \n                            <button onClick={this.deleteJobHandler}>Delete</button>}\n\n                        {(!isLogin ||\n                            ( isLogin && identification === 0 && currentUser.jobs.every(item => item._id !== job._id))) &&\n                            <button onClick={this.applyHandler}>Apply Online</button>}\n\n                        {isLogin && identification === 0 &&\n                            currentUser.jobs.some(item => item._id === job._id) &&\n                            <button disabled>Already Applied</button>}\n                        </div>}\n                    </div>\n                    <div>\n                        <ul>\n                            <li>{job.title}</li>\n                            <li>Company:</li>\n                            <li>{job.companyId.name}</li>\n                            <li>Address:</li>\n                            <li>{job.companyId.address}</li>\n                            <li>Open Date:</li>\n                            <li>{job.date}</li>\n                            <li>Description:</li>\n                            <li>{job.description}</li>\n                            <li>Requirement:</li>\n                            <li>{job.requirement}</li>\n                            <li>Job Type:</li>\n                            <li>{job.type}</li>\n                        </ul>\n                    </div>\n\n                    {isLogin && identification === 1 && job.applicants.length > 0 &&\n                        <div className={classes.applicantsContainer}>\n                            <span>Applicants: </span>\n                            <ul>\n                                {job.applicants.map(item => {\n                                    return (\n                                        <li key={item._id}>{item.username}</li>\n                                    )\n                                })}\n                            </ul>\n                        </div>\n                    }\n                </div>}\n                {this.state.showMask && \n                    <JobMask \n                        title='Update'\n                        cancel={this.cancelMaskHandler} \n                        confirm={this.updateJobHandler}\n                        update={true}\n                        current={job}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({allJobs, loginData, currentUser}) => {\n    return {\n        currentJob: allJobs.currentJob,\n        loginData: loginData,\n        currentUser: currentUser.user\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, {updateJobDetail, applyJob, deleteJob})(JobDetailPage));","import React, {PureComponent} from 'react';\nimport classes from './CreateUserPage.module.css';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {createUser} from '../../actions/userAction';\n\nclass CreateUserPage extends PureComponent {\n\n    state = {\n        firstContent : true\n    }\n\n    constructor(props) {\n        super(props);\n        this.emailEl = React.createRef();\n        this.passwordEl = React.createRef();\n        this.rePasswordEl = React.createRef();\n        this.usernameEl = React.createRef();\n        this.skillsEl = React.createRef();\n        this.desireEl = React.createRef();\n    }\n\n    createUserHandler = (e) => {\n        e.preventDefault();\n\n        const data = {\n            email: this.emailEl.current.value,\n            password: this.passwordEl.current.value,\n            repassword: this.rePasswordEl.current.value,\n            username: this.usernameEl.current.value,\n            skills: this.skillsEl.current.value.split(','),\n            desire: this.desireEl.current.value.split(',')\n        }\n\n        let status = this.props.createUser(data);\n\n        if (status) {\n            this.props.history.push('/user-detail');\n        }\n    }\n\n    changeContentHandler = () => {\n        this.setState({\n            firstContent: !this.state.firstContent\n        });\n    }\n\n    render() {\n        return (\n            <div className={classes.container}>\n                <form className={classes.form}>\n                    \n                            <label htmlFor='user-email'>Email(For Login)</label>\n                            <input id='user-email' type='text' ref={this.emailEl} />\n                            <label htmlFor='user-password'>Password</label>\n                            <input id='user-password' type='password' ref={this.passwordEl}/>\n                            <label htmlFor='user-repassword'>Re-Password</label>\n                            <input id='user-repassword' type='password' ref={this.rePasswordEl}/>\n                            <label htmlFor='user-username'>Username</label>\n                            <input id='user-username' type='text' ref={this.usernameEl}/>\n\n            \n                            <label htmlFor='user-skills'>skills:</label>\n                            <input id='user-skills' type='text' ref={this.skillsEl} />\n                            <label htmlFor='user-desire'>Desired Job Title:</label>\n                            <input id='user-desire' type='text' ref={this.desireEl}/>\n                            <button onClick={this.createUserHandler}>Create</button>\n                      \n                    \n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(connect(null, {createUser})(CreateUserPage));\n","import React, {PureComponent} from 'react';\nimport classes from './UserDetailPage.module.css';\nimport {connect} from 'react-redux';\nimport JobList from '../../components/JobList/JobList';\nimport {getRecommendJobs} from '../../actions/jobsAction';\n\nclass userDetailPage extends PureComponent {\n\n    updateInfoHandler = () => {\n\n    }\n\n    componentDidMount() {\n        this.props.getRecommendJobs(this.props.currentUser.desire);\n    }\n\n    refreshRecommendationHandler = () => {\n        this.props.getRecommendJobs(this.props.currentUser.desire);\n    }\n\n    render() {\n        console.log(this.props.currentUser);\n        const user = this.props.currentUser;\n        return (<div className={classes.container}>\n            {user && <div className={classes.tableContainer}>\n                <table>\n                    <thead>\n                        <tr>\n                            <td>\n                                <span>{user.username}</span>\n                            </td>\n                            <td>\n                                <button \n                                    className={classes.updateButton}\n                                    onClick={this.updateInfoHandler}\n                                >\n                                    Update Info\n                                </button>\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Email: </td>\n                            <td>{user.email}</td>\n                        </tr>\n                        <tr>\n                            <td>Skills</td>\n                            <td>{user.skills}</td>\n                        </tr>\n                        <tr>\n                            <td>Desire Job Title:</td>\n                            <td>{user.desire}</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div className={classes.sideContainer}>\n                    <span>Already Applied Jobs: </span>\n                    <JobList jobs={user.jobs} />\n                </div>\n            </div>}\n\n            {user && \n                <div className={classes.recommendContainer}>\n                    <div>\n                        <span>Recommended Jobs: </span>\n                        <button onClick={this.refreshRecommendationHandler}>Refresh Recommendation</button>\n                    </div>\n                    \n                    <JobList jobs={this.props.recommendJobs} />\n                </div>\n            }\n        </div>)\n    }\n}\n\nconst mapStateTpProps = ({currentUser, allJobs}) => {\n    return {\n        currentUser: currentUser.user,\n        recommendJobs: allJobs.recommendJobs\n    }\n}\n\nexport default connect(mapStateTpProps, {getRecommendJobs})(userDetailPage);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\n\nimport Navigation from './components/Navigation/Navigation';\n\nimport JobPage from './views/JobPage/JobPage';\nimport SignupPage from './views/SignupPage/SignupPage';\nimport CreateCompanyPage from './views/CreateCompanyPage/CreateCompanyPage';\nimport CompanyDetailPage from './views/CompanyDetailPage/CompanyDetailPage';\nimport LoginPage from './views/LoginPage/LoginPage';\nimport JobDetailPage from './views/JobDetailPage/JobDetailPage';\nimport CreateUserPage from './views/CreateUserPage/CreateUserPage';\nimport UserDetailPage from './views/UserDetailPage/UserDetailPage';\n\nclass App extends Component {\n  \n  render() {\n    const isLogin = this.props.loginData.isLogin;\n    const identification = isLogin ? this.props.loginData.identification : null;\n    \n    return (\n        \n        <BrowserRouter>\n          <Navigation />\n          <Switch>\n            \n            <Route exact path='/all-jobs' component={JobPage} />\n            <Route exact path='/signup' component={SignupPage} />\n            <Route exact path='/company-detail' component={CompanyDetailPage} />\n            <Route exact path='/login' component={LoginPage} />\n            <Route exact path='/job-detail' component={JobDetailPage} />\n            <Route exact path='/create-company' component={CreateCompanyPage} />\n            <Route exact path='/create-user' component={CreateUserPage} />\n            {isLogin && identification === 0 && <Route exact path='/user-detail' component={UserDetailPage} />}\n            <Redirect from='*' to='/all-jobs' />\n          </Switch>\n        </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = ({loginData}) => {\n  return {\n    loginData: loginData\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","const initialState = {\n    data: [],\n    currentJob: null,\n    recommendJobs: []\n}\n\nconst jobReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'INITIAL_ALLJOB_DATA': \n            return {\n                ...state,\n                data: action.payload\n            };\n\n        case 'CREATE_JOB_DATA': \n            return {\n                ...state,\n                data: [...state.data, action.payload]\n            }\n\n        case 'VIEW_JOB_DETAIL_DATA':\n            return {\n                ...state,\n                currentJob: action.payload\n            }\n        \n        case 'SET_RECOMMEND_JOBS_DATA':\n            return {\n                ...state,\n                recommendJobs: action.payload\n            }\n\n        default: return state;\n    }\n}\n\nexport default jobReducer;","\n\n\nconst companyReducer = (state = {}, action) => {\n    switch(action.type) {\n        case 'INITIAL_COMPANY_DATA':\n            return {\n                ...state,\n                data: action.payload\n            };\n\n        case 'CREATE_JOB_DATA': \n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    jobs: [\n                        ...state.data.jobs,\n                        action.payload\n                    ]\n                }\n            }\n\n        case 'CHANGE_COMPANY_JOBS_DATA':\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    jobs: action.payload\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport default companyReducer;","\n\nconst initialState = {\n    isLogin: false\n}\n\nconst loginReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'INITIAL_LOGIN_DATA':\n            return {\n                ...action.payload,\n                isLogin: true\n            }\n        case 'DO_LOGOUT_DATA':\n            return {\n                isLogin: false\n            }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","\nlet initialState = {\n    user: {}\n};\n\nconst userReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'INITIAL_USER_DATA':\n            return {\n                ...state,\n                user: action.payload\n            };\n        case 'ADD_JOB_TO_USER_DATA':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    jobs: [...state.user.jobs, action.payload]\n                }\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport default userReducer;","import {combineReducers} from 'redux';\nimport jobReducer from './jobReducer';\nimport companyReducer from './companyReducer';\nimport loginReducer from './loginReducer';\nimport userReducer from './userReducer';\n\nconst rootReducer = combineReducers({\n    allJobs: jobReducer,\n    company: companyReducer,\n    loginData: loginReducer,\n    currentUser: userReducer\n});\n\n\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(rootReducer, {}, applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    \n    document.getElementById('root'));\n\n"],"sourceRoot":""}